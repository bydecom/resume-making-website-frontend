<think>The user is asking me to update the `auth-API-note` file to include the most recent API information, specifically focusing only on the API documentation without the sample code. Let me analyze what's already in the file and what needs to be updated.

Based on the attached file content and the previous conversations, I should:

1. Keep the API endpoint documentation
2. Remove the front-end implementation guide (section 4)
3. Ensure all current API endpoints are included
4. Make sure the documentation is accurate based on the code that's been implemented

Let me check if there are any endpoints or functionality in the actual code that might not be reflected in the documentation.

From the attached user controller file, I see we have endpoints for:
- Register a new user (POST /api/users/register)
- Login user (POST /api/users/login)
- Change user password (PUT /api/users/change-password) - this doesn't appear to be in the documentation
- Create admin account (POST /api/users/create-admin)
- Get all users (GET /api/users)
- Get user by ID (GET /api/users/:userId)
- Delete user (DELETE /api/users/:userId)
- Update user profile (PUT /api/users/me)
- Update user (PUT /api/users/:userId)

From the user routes file, I can confirm all these endpoints have proper Swagger documentation.

I'll create an updated version of the auth-API-note file that includes all these endpoints, keeps the structure, but removes the front-end implementation code.</think># Authentication & Admin API Documentation

## 1. Authentication

### 1.1 Register New User
- **Endpoint**: POST /api/users/register
- **Access**: Public
- **Request Body**:
```json
{
    "name": "John Doe",
    "email": "john@example.com", 
    "password": "password123"
}
```
- **Success Response** (201):
```json
{
    "status": "success",
    "data": {
        "_id": "user_id",
        "name": "John Doe",
        "email": "john@example.com",
        "role": "user",
        "isActive": true,
        "createdAt": "2023-07-01T12:00:00.000Z",
        "token": "JWT_TOKEN"
    },
    "message": "User registered successfully"
}
```

### 1.2 Login
- **Endpoint**: POST /api/users/login  
- **Access**: Public
- **Request Body**:
```json
{
    "email": "john@example.com",
    "password": "password123"
}
```
- **Success Response** (200):
```json
{
    "status": "success",
    "data": {
        "_id": "user_id",
        "name": "John Doe", 
        "email": "john@example.com",
        "role": "user",
        "isActive": true,
        "createdAt": "2023-07-01T12:00:00.000Z",
        "lastLogin": "2023-07-10T15:30:00.000Z",
        "token": "JWT_TOKEN"
    },
    "message": "Login successful"
}
```

### 1.3 Change Password
- **Endpoint**: PUT /api/users/change-password
- **Access**: Private (requires token)
- **Headers**:
```
Authorization: Bearer JWT_TOKEN
```
- **Request Body**:
```json
{
    "currentPassword": "password123",
    "newPassword": "newpassword123"
}
```
- **Success Response** (200):
```json
{
    "status": "success",
    "data": {
        "token": "NEW_JWT_TOKEN"
    },
    "message": "Password changed successfully"
}
```

### 1.4 Create Admin Account
- **Endpoint**: POST /api/users/create-admin
- **Access**: Public (requires admin secret)
- **Request Body**:
```json
{
    "name": "Admin User",
    "email": "admin@example.com",
    "password": "admin123",
    "adminSecret": "your_admin_secret"
}
```
- **Success Response** (201):
```json
{
    "status": "success",
    "data": {
        "_id": "admin_id",
        "name": "Admin User",
        "email": "admin@example.com",
        "role": "admin",
        "isActive": true,
        "createdAt": "2023-07-01T12:00:00.000Z",
        "token": "JWT_TOKEN"
    },
    "message": "Admin created successfully"
}
```

## 2. User Management (Admin Only)

### 2.1 Get All Users
- **Endpoint**: GET /api/users
- **Access**: Private (Admin only)
- **Headers**:
```
Authorization: Bearer JWT_TOKEN
```
- **Query Parameters**:
  - `page`: Page number (default: 1)
  - `limit`: Items per page (default: 10)
  - `search`: Search by name or email
  - `role`: Filter by role
  - `isActive`: Filter by active status
- **Success Response** (200):
```json
{
    "status": "success",
    "data": [
        {
            "_id": "user_id_1",
            "name": "John Doe",
            "email": "john@example.com",
            "role": "user",
            "isActive": true,
            "createdAt": "2023-07-01T12:00:00.000Z",
            "lastLogin": "2023-07-10T15:30:00.000Z"
        },
        {
            "_id": "user_id_2",
            "name": "Jane Smith",
            "email": "jane@example.com",
            "role": "user",
            "isActive": true,
            "createdAt": "2023-07-02T14:30:00.000Z",
            "lastLogin": "2023-07-09T10:15:00.000Z"
        }
    ],
    "pagination": {
        "page": 1,
        "limit": 10,
        "total": 25,
        "pages": 3
    },
    "message": "Users retrieved successfully"
}
```

### 2.2 Get User by ID
- **Endpoint**: GET /api/users/:userId
- **Access**: Private (Admin only)
- **Headers**:
```
Authorization: Bearer JWT_TOKEN
```
- **Success Response** (200):
```json
{
    "status": "success",
    "data": {
        "_id": "user_id",
        "name": "John Doe",
        "email": "john@example.com",
        "role": "user",
        "isActive": true,
        "createdAt": "2023-07-01T12:00:00.000Z",
        "lastLogin": "2023-07-10T15:30:00.000Z"
    },
    "message": "User retrieved successfully"
}
```

### 2.3 Update User (Admin Only)
- **Endpoint**: PUT /api/users/:userId
- **Access**: Private (Admin only)
- **Headers**:
```
Authorization: Bearer JWT_TOKEN
```
- **Request Body**:
```json
{
    "name": "John Updated",
    "email": "john.updated@example.com",
    "isActive": true
}
```
- **Success Response** (200):
```json
{
    "status": "success",
    "data": {
        "_id": "user_id",
        "name": "John Updated",
        "email": "john.updated@example.com",
        "role": "user",
        "isActive": true,
        "createdAt": "2023-07-01T12:00:00.000Z",
        "lastLogin": "2023-07-10T15:30:00.000Z"
    },
    "message": "User updated successfully"
}
```

### 2.4 Delete User
- **Endpoint**: DELETE /api/users/:userId
- **Access**: Private (Admin only)
- **Headers**:
```
Authorization: Bearer JWT_TOKEN
```
- **Success Response** (200):
```json
{
    "status": "success",
    "message": "User deleted successfully"
}
```

### 2.5 Update User Profile (Regular User)
- **Endpoint**: PUT /api/users/me
- **Access**: Private (Requires authentication)
- **Headers**:
```
Authorization: Bearer JWT_TOKEN
```
- **Request Body**:
```json
{
    "name": "John Updated",
    "email": "john.updated@example.com",
    "currentPassword": "password123"
}
```
- **Success Response** (200):
```json
{
    "status": "success",
    "data": {
        "_id": "user_id",
        "name": "John Updated",
        "email": "john.updated@example.com",
        "role": "user",
        "isActive": true,
        "createdAt": "2023-07-01T12:00:00.000Z",
        "lastLogin": "2023-07-10T15:30:00.000Z"
    },
    "message": "Profile updated successfully"
}
```

## 3. Admin Logs

### 3.1 Get Admin Logs
- **Endpoint**: GET /api/admin/logs
- **Access**: Private (Admin only)
- **Headers**:
```
Authorization: Bearer JWT_TOKEN
```
- **Query Parameters**:
  - `page`: Page number (default: 1)
  - `limit`: Items per page (default: 10)
  - `adminId`: Filter by admin ID
  - `action`: Filter by action type (login, create_user, update_user, delete_user, etc.)
  - `startDate`: Filter from date (YYYY-MM-DD)
  - `endDate`: Filter to date (YYYY-MM-DD)
- **Success Response** (200):
```json
{
    "status": "success",
    "data": [
        {
            "_id": "log_id_1",
            "adminId": {
                "_id": "admin_id",
                "name": "Admin User",
                "email": "admin@example.com"
            },
            "action": "login",
            "details": {
                "email": "admin@example.com"
            },
            "ipAddress": "192.168.1.1",
            "userAgent": "Mozilla/5.0...",
            "timestamp": "2023-07-10T15:30:00.000Z"
        },
        {
            "_id": "log_id_2",
            "adminId": {
                "_id": "admin_id",
                "name": "Admin User",
                "email": "admin@example.com"
            },
            "action": "create_user",
            "details": {
                "userId": "user_id",
                "email": "john@example.com"
            },
            "ipAddress": "192.168.1.1",
            "userAgent": "Mozilla/5.0...",
            "timestamp": "2023-07-10T16:00:00.000Z"
        }
    ],
    "pagination": {
        "page": 1,
        "limit": 10,
        "total": 50,
        "pages": 5
    },
    "message": "Admin logs retrieved successfully"
}
```

## 4. Error Handling

Common error responses:
- 400: Validation error (VALIDATION_ERROR, USER_EXISTS, SAME_PASSWORD, EMAIL_EXISTS)
- 401: Authentication error (INVALID_CREDENTIALS, INVALID_PASSWORD, INVALID_ADMIN_SECRET)
- 403: Authorization error (NOT_AUTHORIZED, INSUFFICIENT_PERMISSIONS)
- 404: Resource not found (USER_NOT_FOUND)
- 500: Server error (SERVER_ERROR)

## 5. Notes

1. Mỗi user chỉ có một role duy nhất ('user' hoặc 'admin')
2. Token JWT được sử dụng cho authentication, hạn dùng là 30 ngày
3. Luôn gửi token trong header Authorization: `Bearer JWT_TOKEN`
4. Thời gian tạo tài khoản (createdAt) và lần đăng nhập cuối (lastLogin) được lưu trữ
5. Mọi hành động của admin đều được ghi log
6. User bình thường phải cung cấp currentPassword để cập nhật thông tin
7. Admin có thể cập nhật thông tin người dùng mà không cần mật khẩu
8. Tất cả API thành công đều trả về cấu trúc: `{status, data, message}`
9. Tất cả API lỗi đều trả về cấu trúc: `{status, code, message}`
